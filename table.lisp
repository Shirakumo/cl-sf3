(in-package #:org.shirakumo.sf3)

(bs:define-io-structure column-spec
  (name (string uint16))
  (length uint32)
  (kind uint8))

(define-print-method column-spec "~s ~d ~a" name length type)

(define-accessors column-spec name length kind)

(defun column-spec-type (spec)
  (ecase (column-spec-kind spec)
    (#x01 'bs:uint8)
    (#x02 'bs:uint16)
    (#x04 'bs:uint32)
    (#x08 'bs:uint64)
    (#x11 'bs:sint8)
    (#x12 'bs:sint16)
    (#x14 'bs:sint32)
    (#x18 'bs:sint64)
    (#x22 'bs:float16)
    (#x24 'bs:float32)
    (#x28 'bs:float64)
    (#x31 'bs:utf8-string)
    (#x48 'timestamp)
    (#x58 'high-resolution-timestamp)
    (#x61 'boolean)))

(defun column-spec-reader (spec)
  (ecase (column-spec-kind spec)
    (#x01 #'bst:uint8/io-octet-vector)
    (#x02 #'bst:uint16/io-octet-vector)
    (#x04 #'bst:uint32/io-octet-vector)
    (#x08 #'bst:uint64/io-octet-vector)
    (#x11 #'bst:sint8/io-octet-vector)
    (#x12 #'bst:sint16/io-octet-vector)
    (#x14 #'bst:sint32/io-octet-vector)
    (#x18 #'bst:sint64/io-octet-vector)
    (#x22 #'bst:uint16/io-octet-vector)
    (#x24 #'bst:float32/io-octet-vector)
    (#x28 #'bst:float64/io-octet-vector)
    (#x31 #'bst:utf8-string/io-octet-vector)
    (#x48 #'bst:uint64/io-octet-vector)
    (#x58 #'bst:uint64/io-octet-vector)
    (#x61 #'bst:boolean/io-octet-vector)))

(defun column-spec-element-size (spec)
  (ldb (byte 4 0) (column-spec-kind spec)))

(defun column-spec-element-count (spec)
  (/ (column-spec-length spec) (column-spec-element-size spec)))

(bs:define-io-structure table
  (spec-length uint32)
  (column-count uint16)
  (row-length uint64)
  (row-count uint64)
  (column-specs (vector column-spec (bs:slot column-count)))
  (row-data (vector uint8 (* (bs:slot row-length) (bs:slot row-count)))))

(define-print-method table "~dx~d" column-count row-count)

(define-accessors table column-count row-count column-specs row-data)

(defun row (table row)
  (loop for i from 0 below (table-column-count table)
        collect (cell table row column)))

(defun cell (table row column)
  (let* ((data (table-row-data table))
         (specs (table-column-specs table))
         (spec (aref specs column))
         (row-start (* row (table-row-length table)))
         (cell-start (+ row-start (loop for i from 0 below column
                                        sum (column-spec-length (aref specs i)))))
         (cell-end (+ cell-start (column-spec-length spec)))
         (reader (column-spec-reader spec)))
    (loop while (< cell-start cell-end)
          collect (multiple-value-bind (v i) (funcall reader data cell-start cell-end)
                    (setf cell-start i)
                    v))))
