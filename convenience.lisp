#|
 This file is a part of SF3
 (c) 2022 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)
 Author: Nicolas Hafner <shinmera@tymoon.eu>
|#

(in-package #:org.shirakumo.sf3)

(define-accessors archive-meta-entry modification-time checksum mime-type path)
(define-accessors archive meta-entries files)
(define-accessors audio samplerate channels sample-format samples)
(define-accessors image width height depth channels data)
(define-accessors log-entry size time severity source category message)
(define-accessors log-chunk size entries)
(define-accessors log start-time chunks)
(define-accessors model textures faces vertices)
(define-accessors color-option r g b)
(define-accessors size-option size)
(define-accessors heading-option level)
(define-accessors link-option address)
(define-accessors target-option address)
(define-accessors text markup text)
(define-accessors color r g b a)
(define-accessors point x y)
(define-accessors size w h (width w) (height h))
(define-accessors line color thickness points)
(define-accessors filled-shape fill-color outline-color outline-thickness)
(define-accessors rectangle location size)
(define-accessors circle location size)
(define-accessors polygon points)
(define-accessors curve points)
(define-accessors text-shape color location font font-size text)
(define-accessors vector-graphic width height instructions)
(define-accessors sf3-file content)

(define-delegates sf3-file content modification-time checksum mime-type path meta-entries files samplerate channels sample-format samples width height depth data size time severity source category message entries start-time chunks textures faces vertices color level address markup text r g b a x y w h thickness points fill-color outline-color outline-thickness location font font-size instructions)

(defmethod add-file ((file pathname) (archive archive) &key (mime-type "application/octet-stream")
                                                            (path (file-namestring file)))
  (let ((entry (make-archive-meta-entry :modification-time (file-write-date file)
                                        :checksum (crc32 file)
                                        :mime-type mime-type
                                        :path path)))
    (vector-push-extend (archive-meta-size archive) (archive-meta-offsets archive))
    (vector-push-extend entry (archive-meta-entries archive))
    (incf (archive-meta-size archive) (bs:octet-size entry))
    (vector-push-extend (if (< 0 (archive-count archive))
                            (+ (aref (archive-file-offsets archive) (1- (archive-count archive)))
                               (length (aref (archive-files archive) (1- (archive-count archive)))))
                            0)
                        (archive-file-offsets archive))
    (vector-push-extend (alexandria:read-file-into-byte-vector file)
                        (archive-files archive))
    (incf (archive-count archive))))

(defmethod extract-file ((file integer) (archive archive) &key path (if-exists :error) (verify T))
  (let* ((meta (aref (archive-meta-entries archive) file))
         (path (or path (archive-meta-entry-path meta))))
    (alexandria:write-byte-vector-into-file (aref (archive-files archive) file) path :if-exists if-exists)
    (when verify (assert (= (archive-meta-entry-checksum meta) (crc32 path))))))

(defmethod extract-file ((all (eql T)) (archive archive) &key path (if-exists :error) (verify T))
  (loop with metas = (archive-meta-entries archive)
        with files = (archive-files archive)
        for i from 0 below (archive-count archive)
        for meta = (aref metas i)
        for bytes = (aref files i)
        for file-path = (merge-pathnames (archive-meta-entry-path meta) path)
        do (alexandria:write-byte-vector-into-file bytes file-path :if-exists if-exists)
           (when verify (assert (= (archive-meta-entry-checksum meta) (crc32 file-path))))))

(defgeneric file-extension (object)
  (:method ((_ sf3-file)) (mime-type (sf3-file-content _)))
  (:method ((_ archive)) "ar.sf3")
  (:method ((_ audio)) "au.sf3")
  (:method ((_ image)) "img.sf3")
  (:method ((_ log)) "log.sf3")
  (:method ((_ model)) "mod.sf3")
  (:method ((_ text)) "txt.sf3")
  (:method ((_ vector-graphic)) "vec.sf3"))

(defgeneric mime-type (object)
  (:method ((_ sf3-file)) (mime-type (sf3-file-content _)))
  (:method ((_ archive)) "application/x.sf3-archive")
  (:method ((_ audio)) "audio/x.sf3")
  (:method ((_ image)) "image/x.sf3")
  (:method ((_ log)) "application/x.sf3-log")
  (:method ((_ model)) "model/x.sf3")
  (:method ((_ text)) "text/x.sf3")
  (:method ((_ vector-graphic)) "image/x.sf3-vector"))

(defun read-sf3 (storage &rest args)
  (sf3-file-content (apply #'read-sf3-file storage args)))

(defun write-sf3 (object storage &rest args)
  (let ((sf3-file (make-sf3-file :content object)))
    (declare (dynamic-extent sf3-file))
    (apply #'write-sf3-file storage args)))

(defun tell-sf3 (storage &rest args)
  (let ((values (multiple-value-list (apply #'read-sf3-file-header storage args))))
    (values-list (list* (sf3-file-header-type (first values)) (rest values)))))
